Aim: To print a heap as a tree-like structure to visualize its hierarchy.

Procedure:

 1. Define a function to print the heap in a tree-like format using the total width for spacing.

 2. Use logarithmic calculations to determine the position of elements.

 3. Traverse the heap and print each element in its respective position.

 4. Input a sample heap using heap operations (insertion).

 5. Output the visualized tree structure.

Program:

import math

from io import StringIO

#source https://bit.ly/38HXSoU

def show_tree(tree, total_width=60, fill=' '):

 """Pretty-print a tree.

 total_width depends on your input size"""

 output = StringIO()

 last_row = -1

 for i, n in enumerate(tree):

 if i:

 row = int(math.floor(math.log(i+1, 2)))

 else:

 row = 0

 if row != last_row:

 output.write('\n')

 columns = 2**row
col_width = int(math.floor((total_width * 1.0) / columns))

 output.write(str(n).center(col_width, fill))

 last_row = row

 print (output.getvalue())

 print ('-' * total_width)

 return

#test

import heapq

heap = []

heapq.heappush(heap, 1)

heapq.heappush(heap, 2)

heapq.heappush(heap, 3)

heapq.heappush(heap, 4)

heapq.heappush(heap, 7)

heapq.heappush(heap, 9)

heapq.heappush(heap, 10)

heapq.heappush(heap, 8)

heapq.heappush(heap, 16)

heapq.heappush(heap, 14)

show_tree(heap)
