from collections import deque

def bfs(graph, start):
    visited = set()  # Set to keep track of visited nodes
    queue = deque([start])  # Initialize queue with the starting node
    
    while queue:
        node = queue.popleft()  # Dequeue a node
        if node not in visited:
            print(node, end=' ')  # Process the node
            visited.add(node)  # Mark the node as visited
            
            # Enqueue all unvisited neighbors
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append(neighbor)
                    
# Example usage
if _name_ == "_main_":
    # Graph represented as an adjacency list
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }
    
    print("Breadth-First Search starting from node 'A':")
    bfs(graph, 'A')
